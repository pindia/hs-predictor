// Generated by CoffeeScript 1.10.0
(function() {
  var Unit, module, serializeScope, unserializeScope;

  module = angular.module("hs", []);

  Unit = (function() {
    function Unit(hp) {
      this.hp = hp;
    }

    Unit.prototype.modHp = function(amt) {
      return this.hp = Math.min(99, Math.max(0, parseInt(this.hp) + amt));
    };

    return Unit;

  })();

  module.filter('numberFixedLen', function () {
    return function (n, len) {
        var num = Math.round(n);
        len = parseInt(len, 10);
        if (isNaN(num) || isNaN(len)) {
            return n;
        }
        num = ''+num;
        while (num.length < len) {
            num = ' '+num;
        }
        return num;
    };
});;

  module.directive('box', function() {
    return {
      restrict: 'E',
      scope: {
        value: '=value'
      },
      template: '<div class="unit" ng-class="{disabled: value==0}" data-value="{{value}}">\n    <div class="unit-box">\n      <input type="text" ng-model="value">\n      <div ng-click="modValue(1)" class="up-arrow"><span class="icon">&#9650;</span></div>\n      <div ng-click="modValue(-1)" class="down-arrow"><span class="icon">&#9660;</span></div>\n    </div>\n</div>',
      controller: function($scope) {
        return $scope.modValue = function(amt) {
          return $scope.value = Math.min(99, Math.max(0, parseInt($scope.value) + amt));
        };
      }
    };
  });

  module.directive('unit', function() {
    return {
      restrict: 'E',
      scope: {
        unit: '=unit'
      },
      template: '<div class="unit" ng-class="{disabled: unit.hp==0}" data-hp="{{unit.hp}}">\n    <div class="unit-box">\n      <input type="text" ng-model="unit.hp">\n      <div ng-click="unit.modHp(1)" class="up-arrow"><span class="icon">&#9650;</span></div>\n      <div ng-click="unit.modHp(-1)" class="down-arrow"><span class="icon">&#9660;</span></div>\n    </div>\n    <div class="results-box">\n      <table ng-show="unit.hp > 0">\n          <tr ng-repeat="(dmg, prob) in unit.results" ng-class="{lethal: dmg == unit.hp}">\n              <td>{{dmg}}</td>\n              <td title="{{prob}}">{{prob*100|numberFixedLen:3}}%</td>\n          </tr>\n      </table>\n    </div>\n</div>'
    };
  });

  module.factory('unitsService', function() {
    var units;
    units = {
      my: [new Unit(30), new Unit(0), new Unit(0), new Unit(0), new Unit(0), new Unit(0), new Unit(0), new Unit(0)],
      enemy: [new Unit(30), new Unit(2), new Unit(0), new Unit(0), new Unit(0), new Unit(0), new Unit(0), new Unit(0)]
    };
    return units;
  });

  serializeScope = function($scope, myUnits, enemyUnits) {
    var unit;
    return $scope.enemyDamage + ',' + $scope.allDamage + ';' + ((function() {
      var j, len, results1;
      results1 = [];
      for (j = 0, len = myUnits.length; j < len; j++) {
        unit = myUnits[j];
        results1.push(unit.hp);
      }
      return results1;
    })()).join(',') + ';' + ((function() {
      var j, len, results1;
      results1 = [];
      for (j = 0, len = enemyUnits.length; j < len; j++) {
        unit = enemyUnits[j];
        results1.push(unit.hp);
      }
      return results1;
    })()).join(',');
  };

  unserializeScope = function($scope, unitsService) {
    var bits, hp, ref;
    bits = window.location.hash.slice(1).split(';');
    ref = bits[0].split(','), $scope.enemyDamage = ref[0], $scope.allDamage = ref[1];
    unitsService.my = (function() {
      var j, len, ref1, results1;
      ref1 = bits[1].split(',');
      results1 = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        hp = ref1[j];
        results1.push(new Unit(parseInt(hp)));
      }
      return results1;
    })();
    unitsService.enemy = (function() {
      var j, len, ref1, results1;
      ref1 = bits[2].split(',');
      results1 = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        hp = ref1[j];
        results1.push(new Unit(parseInt(hp)));
      }
      return results1;
    })();
    return console.log(unitsService.my);
  };

  window.MainController = function($scope, unitsService) {
    $scope.enemyDamage = 3;
    $scope.allDamage = 0;
    $scope.trials = 0;
    $scope.$watch('enemyDamage', function() {
      if ($scope.enemyDamage > 0) {
        $scope.allDamage = 0;
      }
      return $scope.$emit('unitsChanged');
    });
    $scope.$watch('allDamage', function() {
      if ($scope.allDamage > 0) {
        $scope.enemyDamage = 0;
      }
      return $scope.$emit('unitsChanged');
    });
    if (window.location.hash) {
      unserializeScope($scope, unitsService);
    }
    return $scope.$on('unitsChanged', function() {
      var arr, damageAmounts, damageTypes, enemyUnits, firstZero, i, j, k, l, len, len1, len2, m, myIndex, myUnits, n, o, ref, ref1, ref2, ref3, ref4, ref5, res, results, results1, trials, unit;
      window.location.hash = serializeScope($scope, unitsService.my, unitsService.enemy);
      myUnits = (function() {
        var j, len, ref, results1;
        ref = unitsService.my;
        results1 = [];
        for (j = 0, len = ref.length; j < len; j++) {
          unit = ref[j];
          results1.push(unit.hp);
        }
        return results1;
      })();
      enemyUnits = (function() {
        var j, len, ref, results1;
        ref = unitsService.enemy;
        results1 = [];
        for (j = 0, len = ref.length; j < len; j++) {
          unit = ref[j];
          results1.push(unit.hp);
        }
        return results1;
      })();
      ref = [myUnits, enemyUnits];
      for (j = 0, len = ref.length; j < len; j++) {
        arr = ref[j];
        firstZero = arr.length;
        for (i = k = ref1 = arr.length - 1; ref1 <= 1 ? k <= 1 : k >= 1; i = ref1 <= 1 ? ++k : --k) {
          if (arr[i] === 0) {
            firstZero = i;
          } else {
            break;
          }
        }
        arr.splice(firstZero, arr.length - firstZero);
      }
      myIndex = enemyUnits.length;
      damageAmounts = [];
      damageTypes = [];
      for (i = l = 0, ref2 = $scope.allDamage; 0 <= ref2 ? l < ref2 : l > ref2; i = 0 <= ref2 ? ++l : --l) {
        damageAmounts.push(1);
        damageTypes.push(true);
      }
      for (i = m = 0, ref3 = $scope.enemyDamage; 0 <= ref3 ? m < ref3 : m > ref3; i = 0 <= ref3 ? ++m : --m) {
        damageAmounts.push(1);
        damageTypes.push(false);
      }
      console.log(damageTypes);
      console.log(myUnits);
      if (damageAmounts.length * (myUnits.length + enemyUnits.length) > 50) {
        trials = 10000;
        results = simulate(myUnits, enemyUnits, damageAmounts, damageTypes, trials);
        $scope.trials = trials;
      } else {
        results = calculate(myUnits, enemyUnits, damageAmounts, damageTypes);
        $scope.trials = 0;
      }
      ref4 = results.data.slice(0, myIndex);
      for (i = n = 0, len1 = ref4.length; n < len1; i = ++n) {
        res = ref4[i];
        unitsService.enemy[i].results = res;
      }
      ref5 = results.data.slice(myIndex);
      results1 = [];
      for (i = o = 0, len2 = ref5.length; o < len2; i = ++o) {
        res = ref5[i];
        results1.push(unitsService.my[i].results = res);
      }
      return results1;
    });
  };

  window.Side = function($scope, unitsService) {
    $scope.init = function(which) {
      return $scope.units = unitsService[which];
    };
    return $scope.$watch('units', function() {
      return $scope.$emit('unitsChanged');
    }, true);
  };

}).call(this);
